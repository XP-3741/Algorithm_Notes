/*
  题目描述：
    给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。
    注意:不允许使用任何将字符串作为数学表达式计算的内置函数，比如 eval() 。
    
  提示：
    1 <= s.length <= 3 * 105
    s 由数字、'+'、'-'、'('、')'、和 ' ' 组成
    s 表示一个有效的表达式
    '+' 不能用作一元运算(例如， "+1" 和 "+(2 + 3)" 无效)
    '-' 可以用作一元运算(即 "-1" 和 "-(2 + 3)" 是有效的)
    输入中不存在两个连续的操作符
    每个数字和运行的计算将适合于一个有符号的 32位 整数
*/

/*
  总结：
    用1和-1代替＋和-
    并利用压栈出栈代表运算的括号里面符号是否受括号前运算符影响
*/

/* 官方答案 */
class Solution {
public:
    int calculate(string s) {
        stack<int> ops;     // 符号栈
        ops.push(1);        // 初始为正
        int sign = 1;       // 代表正负     1:正    0:负

        int ret = 0;        // 计算值
        int n = s.length(); // 字符串长度
        int i = 0;          // 索引
        while (i < n) {
            if (s[i] == ' ') {          // 跳过空格
                i++;
            } else if (s[i] == '+') {   // 遇 '+'
                sign = ops.top();   // 符号标记为栈顶符号标记
                i++;
            } else if (s[i] == '-') {   // 遇 '-'
                sign = -ops.top();  // 符号标记为栈顶符号标记的相反数
                i++;
            } else if (s[i] == '(') {   // 遇 '('
                ops.push(sign);     // 将符号压栈,因为括号前的符号会印象真个括号内符号
                i++;
            } else if (s[i] == ')') {   // 遇 ')'
                ops.pop();          // 括号内计算结束,栈顶出栈(括号前符号标记)
                i++;
            } else {                    // 遇 数字
                long num = 0;       // 单个数字总值
                while (i < n && s[i] >= '0' && s[i] <= '9') {   // 求取单个数字总值
                    num = num * 10 + s[i] - '0';
                    i++;
                }
                ret += sign * num;      // 计算值加上(符号)当前数
            }
        }
        return ret;
    }
};
